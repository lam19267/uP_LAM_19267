$date
	Sun Nov 22 19:40:49 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 4 ! data_bus [3:0] $end
$var wire 1 " z_flag $end
$var wire 8 # program_byte [7:0] $end
$var wire 1 $ phase $end
$var wire 4 % oprnd [3:0] $end
$var wire 4 & instr [3:0] $end
$var wire 1 ' c_flag $end
$var wire 12 ( address_RAM [11:0] $end
$var wire 4 ) accu [3:0] $end
$var wire 12 * PC [11:0] $end
$var wire 4 + FF_out [3:0] $end
$var reg 1 , clock $end
$var reg 4 - pushbuttons [3:0] $end
$var reg 1 . reset $end
$var integer 32 / immediateDelay [31:0] $end
$var integer 32 0 jumpDelay [31:0] $end
$var integer 32 1 memoryDelay [31:0] $end
$scope module uPmodule $end
$var wire 1 , clock $end
$var wire 4 2 data_bus [3:0] $end
$var wire 4 3 pushbuttons [3:0] $end
$var wire 1 . reset $end
$var wire 1 " z_flag $end
$var wire 8 4 program_byte [7:0] $end
$var wire 1 $ phase $end
$var wire 4 5 oprnd [3:0] $end
$var wire 4 6 instr [3:0] $end
$var wire 13 7 controls [12:0] $end
$var wire 1 ' c_flag $end
$var wire 12 8 address_RAM [11:0] $end
$var wire 4 9 accu [3:0] $end
$var wire 4 : a [3:0] $end
$var wire 1 ; Ze $end
$var wire 12 < PC [11:0] $end
$var wire 4 = FF_out [3:0] $end
$var wire 1 > C $end
$scope module ACCU1 $end
$var wire 1 , clk $end
$var wire 1 ? enable $end
$var wire 1 . reset $end
$var wire 4 @ accu [3:0] $end
$var wire 4 A A [3:0] $end
$scope module F3 $end
$var wire 1 , clk $end
$var wire 1 ? enable $end
$var wire 1 . reset $end
$var wire 4 B A [3:0] $end
$var reg 4 C Y [3:0] $end
$upscope $end
$upscope $end
$scope module ALU1 $end
$var wire 4 D A [3:0] $end
$var wire 4 E B [3:0] $end
$var wire 3 F R [2:0] $end
$var wire 1 ; Ze $end
$var wire 4 G Y [3:0] $end
$var wire 1 > C $end
$var reg 5 H H [4:0] $end
$upscope $end
$scope module BD1 $end
$var wire 4 I data_bus [3:0] $end
$var wire 1 J enable $end
$var wire 4 K A [3:0] $end
$upscope $end
$scope module BD2 $end
$var wire 4 L A [3:0] $end
$var wire 4 M data_bus [3:0] $end
$var wire 1 N enable $end
$upscope $end
$scope module BD3 $end
$var wire 4 O A [3:0] $end
$var wire 4 P data_bus [3:0] $end
$var wire 1 Q enable $end
$upscope $end
$scope module DECODE1 $end
$var wire 7 R A [6:0] $end
$var wire 13 S controls [12:0] $end
$var reg 13 T Y [12:0] $end
$upscope $end
$scope module FETCH1 $end
$var wire 1 , clk $end
$var wire 1 U enable $end
$var wire 1 . reset $end
$var wire 4 V oprnd [3:0] $end
$var wire 4 W instr [3:0] $end
$var wire 8 X A [7:0] $end
$scope module F1 $end
$var wire 4 Y A [3:0] $end
$var wire 1 , clk $end
$var wire 1 U enable $end
$var wire 1 . reset $end
$var reg 4 Z Y [3:0] $end
$upscope $end
$scope module F2 $end
$var wire 4 [ A [3:0] $end
$var wire 1 , clk $end
$var wire 1 U enable $end
$var wire 1 . reset $end
$var reg 4 \ Y [3:0] $end
$upscope $end
$upscope $end
$scope module FFP44 $end
$var wire 4 ] A [3:0] $end
$var wire 1 , clk $end
$var wire 1 ^ enable $end
$var wire 1 . reset $end
$var reg 4 _ Y [3:0] $end
$upscope $end
$scope module FLAGS1 $end
$var wire 1 > carry $end
$var wire 1 , clk $end
$var wire 1 ` enable $end
$var wire 1 . reset $end
$var wire 1 ; zero $end
$var wire 1 " z_flag $end
$var wire 1 ' c_flag $end
$scope module U1 $end
$var wire 1 ; A $end
$var wire 1 , clk $end
$var wire 1 ` enable $end
$var wire 1 . reset $end
$var reg 1 " Y $end
$upscope $end
$scope module U2 $end
$var wire 1 > A $end
$var wire 1 , clk $end
$var wire 1 ` enable $end
$var wire 1 . reset $end
$var reg 1 ' Y $end
$upscope $end
$upscope $end
$scope module PC1 $end
$var wire 1 , clk $end
$var wire 1 a enable $end
$var wire 12 b load [11:0] $end
$var wire 1 c loadbit $end
$var wire 1 . reset $end
$var reg 12 d PC [11:0] $end
$upscope $end
$scope module PHASE1 $end
$var wire 1 , clk $end
$var wire 1 e enable $end
$var wire 1 . reset $end
$var wire 1 $ phase $end
$scope module U1 $end
$var wire 1 f A $end
$var wire 1 , clk $end
$var wire 1 e enable $end
$var wire 1 . reset $end
$var reg 1 $ Y $end
$upscope $end
$upscope $end
$scope module RAM1 $end
$var wire 12 g address [11:0] $end
$var wire 1 h cs $end
$var wire 4 i data [3:0] $end
$var wire 1 j we $end
$var reg 4 k data_out [3:0] $end
$upscope $end
$scope module ROM1 $end
$var wire 12 l A [11:0] $end
$var wire 8 m program_byte [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx m
bx l
bx k
xj
bx i
xh
bx g
xf
1e
bx d
xc
bx b
xa
x`
bx _
x^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
xU
bx T
bx S
bx R
xQ
bx P
b0 O
xN
bx M
bx L
bx K
xJ
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
x?
x>
bx =
bx <
x;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
b0 3
bx 2
b100010100 1
b1010010000 0
b10000 /
0.
b0 -
0,
bx +
bx *
bx )
bx (
x'
bx &
bx %
x$
bx #
x"
bx !
$end
#5
b0 !
b0 2
b0 E
b0 I
b0 M
b0 P
b0 ]
b0 i
0^
0Q
1N
0?
b0 F
0`
0j
0h
0J
0c
1a
b1000000001000 7
b1000000001000 S
b1000000001000 T
1;
b0 :
b0 A
b0 B
b0 G
b0 L
0>
1f
1U
b110 [
b100 Y
b0 H
0$
b0 &
b0 6
b0 W
b0 Z
b0 %
b0 5
b0 K
b0 V
b0 \
b1000110 (
b1000110 8
b1000110 b
b1000110 g
b1000110 #
b1000110 4
b1000110 X
b1000110 m
b0 *
b0 <
b0 d
b0 l
0"
b0 R
0'
b0 )
b0 9
b0 @
b0 C
b0 D
b0 +
b0 =
b0 _
b1 -
b1 3
b1 O
1.
1,
#10
0.
0,
#15
0;
b110 :
b110 A
b110 B
b110 G
b110 L
b110 H
b110 !
b110 2
b110 E
b110 I
b110 M
b110 P
b110 ]
b110 i
0N
1?
b10 F
1`
1J
0a
b11010000010 7
b11010000010 S
b11010000010 T
b101 [
b101 Y
0f
0U
b1010101 #
b1010101 4
b1010101 X
b1010101 m
b1 *
b1 <
b1 d
b1 l
b11001010101 (
b11001010101 8
b11001010101 b
b11001010101 g
b110 %
b110 5
b110 K
b110 V
b110 \
b100 &
b100 6
b100 W
b100 Z
b100001 R
1$
1,
#20
0,
#25
b110 !
b110 2
b110 E
b110 I
b110 M
b110 P
b110 ]
b110 i
1N
0?
b0 F
0`
0J
1a
b1000000001000 7
b1000000001000 S
b1000000001000 T
1f
1U
b100000 R
0$
b110 )
b110 9
b110 @
b110 C
b110 D
1,
#30
0,
#35
b1 :
b1 A
b1 B
b1 G
b1 L
b1 H
b1 !
b1 2
b1 E
b1 I
b1 M
b1 P
b1 ]
b1 i
1Q
0N
1?
b10 F
1`
0a
b11010000100 7
b11010000100 S
b11010000100 T
b10 [
b1010 Y
0f
0U
b10100010 #
b10100010 4
b10100010 X
b10100010 m
b10 *
b10 <
b10 d
b10 l
b10110100010 (
b10110100010 8
b10110100010 b
b10110100010 g
b101 %
b101 5
b101 K
b101 V
b101 \
b101 &
b101 6
b101 W
b101 Z
b101001 R
1$
1,
#40
0,
#45
0Q
1N
0?
b0 F
0`
1a
b1000000001000 7
b1000000001000 S
b1000000001000 T
1f
1U
b101000 R
0$
b1 )
b1 9
b1 @
b1 C
b1 D
1,
#50
0,
#55
0;
b11 :
b11 A
b11 B
b11 G
b11 L
0>
b11 H
b10 !
b10 2
b10 E
b10 I
b10 M
b10 P
b10 ]
b10 i
0N
1?
b11 F
1`
1J
0a
b11011000010 7
b11011000010 S
b11011000010 T
b1 [
b0 Y
0f
0U
b1 #
b1 4
b1 X
b1 m
b11 *
b11 <
b11 d
b11 l
b1000000001 (
b1000000001 8
b1000000001 b
b1000000001 g
b10 %
b10 5
b10 K
b10 V
b10 \
b1010 &
b1010 6
b1010 W
b1010 Z
b1010001 R
1$
1,
#60
0,
#65
b11 !
b11 2
b11 E
b11 I
b11 M
b11 P
b11 ]
b11 i
1N
0?
b0 F
0`
0J
1a
b1000000001000 7
b1000000001000 S
b1000000001000 T
b11 :
b11 A
b11 B
b11 G
b11 L
1f
1U
b11 H
b1010000 R
0$
b11 )
b11 9
b11 @
b11 C
b11 D
1,
#70
0,
#75
b11 [
b1011 Y
0f
0U
b10110011 #
b10110011 4
b10110011 X
b10110011 m
b100 *
b100 <
b100 d
b100 l
b110110011 (
b110110011 8
b110110011 b
b110110011 g
b1 %
b1 5
b1 K
b1 V
b1 \
b0 &
b0 6
b0 W
b0 Z
b1 R
1$
1,
#80
0,
#85
1f
1U
b1 [
b0 Y
b0 R
0$
b100000001 (
b100000001 8
b100000001 b
b100000001 g
b1 #
b1 4
b1 X
b1 m
b101 *
b101 <
b101 d
b101 l
1,
#90
0,
#95
b1101 [
b1100 Y
0f
0U
b111001101 (
b111001101 8
b111001101 b
b111001101 g
b11001101 #
b11001101 4
b11001101 X
b11001101 m
b110 *
b110 <
b110 d
b110 l
b1 R
1$
1,
#100
0,
#105
1f
1U
b1 [
b0 Y
b0 R
0$
b100000001 (
b100000001 8
b100000001 b
b100000001 g
b1 #
b1 4
b1 X
b1 m
b111 *
b111 <
b111 d
b111 l
1,
#110
0,
